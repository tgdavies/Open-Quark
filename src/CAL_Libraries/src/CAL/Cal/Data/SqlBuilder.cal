/*
 * Copyright (c) 2007 BUSINESS OBJECTS SOFTWARE LIMITED
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *  
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *  
 *     * Neither the name of Business Objects nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 *  
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */


/*
 * SqlBuilder.cal
 * Creation date: Jan 27, 2004.
 * By: Richard Webster
 */

/**
 * Individual {@link typeConstructor = SqlBuilder@} implementations have been moved into the Cal.Data.SqlBuilder package.
 * This module now is primarily for compatibility with the earlier versions of the code, and provides the {@link bestSqlBuilderForDatabase@} function 
 * which attempts to select the best {@link typeConstructor = SqlBuilder@} based on the name of the database type.
 * 
 * @author Richard Webster
 */
    

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

module Cal.Data.SqlBuilder;

import Cal.Core.Prelude using
    typeConstructor = String;
    dataConstructor = Nothing, Just;
    function = abs;
    ;
    
import Cal.Collections.List;

import Cal.Core.String using
    function = toUpperCase;
    ;        

import Cal.Data.Sql using
    typeConstructor = SqlBuilder;
    ;

import Cal.Data.SqlBuilder.MsJetSqlBuilder;
import Cal.Data.SqlBuilder.MySqlBuilder;
import Cal.Data.SqlBuilder.MsSqlServerBuilder;
import Cal.Data.SqlBuilder.DerbySqlBuilder;
import Cal.Data.SqlBuilder.OdbcSqlBuilder;
import Cal.Data.SqlBuilder.DefaultSqlBuilder;
import Cal.Data.SqlBuilder.Db2SqlBuilder;
import Cal.Data.SqlBuilder.OracleSqlBuilder;
import Cal.Data.SqlBuilder.TeradataSqlBuilder;
import Cal.Data.SqlBuilder.PostgreSqlBuilder;



// Local references to various SQL builders -- mostly for compatibility with older versions (which had all SqlBuilder implementations in this module).
public defaultSqlBuilder = SqlBuilder.DefaultSqlBuilder.defaultSqlBuilder;
public odbcSqlBuilder = SqlBuilder.OdbcSqlBuilder.odbcSqlBuilder;
public odbcAccessSqlBuilder = SqlBuilder.OdbcSqlBuilder.odbcAccessSqlBuilder;
public msAccessSqlBuilder = SqlBuilder.MsJetSqlBuilder.msAccessSqlBuilder;
public msJetSqlBuilder = SqlBuilder.MsJetSqlBuilder.msJetSqlBuilder;
public msSqlServerSqlBuilder = SqlBuilder.MsSqlServerBuilder.msSqlServerSqlBuilder;
public oracleSqlBuilder = SqlBuilder.OracleSqlBuilder.oracleSqlBuilder;
public ncrTeradataSqlBuilder = SqlBuilder.TeradataSqlBuilder.teradataSqlBuilder;
public db2SqlBuilder = SqlBuilder.Db2SqlBuilder.db2SqlBuilder;
public derbySqlBuilder = SqlBuilder.DerbySqlBuilder.derbySqlBuilder;
mySqlBuilder = SqlBuilder.MySqlBuilder.mySqlBuilder;
postgreSqlBuilder = SqlBuilder.PostgreSqlBuilder.postgreSqlBuilder;


/**
 * Returns the best {@link typeConstructor = SqlBuilder@} for the type of database type name specified.
 * If no match can be found, then the default {@link typeConstructor = SqlBuilder@} will be returned.
 */
bestSqlBuilderForDatabase :: String -> SqlBuilder;
public bestSqlBuilderForDatabase !databaseTypeName = 
    let
        // This associates a SQL builder with a database type prefix (not case sensitive).
        prefixToSqlBuilderMap :: [(String, SqlBuilder)];
        prefixToSqlBuilderMap = [("Access", msAccessSqlBuilder),
                                 ("Microsoft Access", msAccessSqlBuilder),
                                 ("MS Access", msAccessSqlBuilder),
                                 ("Excel", msJetSqlBuilder),
                                 ("Microsoft Excel", msJetSqlBuilder),
                                 ("MS Excel", msJetSqlBuilder),
                                 ("SQL Server", msSqlServerSqlBuilder),
                                 ("Microsoft SQL Server", msSqlServerSqlBuilder),
                                 ("MS SQL Server", msSqlServerSqlBuilder),
                                 ("Oracle", oracleSqlBuilder),
                                 ("Teradata", ncrTeradataSqlBuilder),
                                 ("DB2", db2SqlBuilder),
                                 ("Apache Derby", derbySqlBuilder),
                                 ("MySQL", mySqlBuilder),
                                 ("PostreSQL", postgreSqlBuilder)
//                                 ("SQLite", sqliteBuilder),
//                                 ("Informix", informixSqlBuilder),
//                                 ("Sybase", sybaseSqlBuilder),
                                 ];
    in
        case List.find (\!pr -> String.startsWith (toUpperCase pr.#1) (toUpperCase databaseTypeName)) prefixToSqlBuilderMap of
        Nothing -> defaultSqlBuilder;
        Just matchingItem -> matchingItem.#2;
        ;

